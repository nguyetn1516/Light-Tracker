#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
#include "LabJackUD.h"
#include "LJUD_DynamicLinking.h"


// ErrorHandler code was written by the LabJack company
void ErrorHandler (LJ_ERROR ljError, long lngLineNumber)
{
  char err[255];
  if (ljError != LJE_NOERROR)
  {
    ErrorToString(ljError, err);
    printf("Error # %ld: %s\n", ljError, err);
    printf("Source line number = %ld\n", lngLineNumber);
    if(ljError > LJE_MIN_GROUP_ERROR)
    { 
      getchar();
      exit(0); // Quit if serious error
    }
  }
}

LJ_ERROR ljError;         // LabJack error code
LJ_HANDLE ljHandle = 0;   // ID# assigned to the opened LabJack
int ReadSensorVal;
LoadLabJackUD(); // Load the LabJack DLL

// Open the first found LabJack U3
ljError = OpenLabJack (LJ_dtU3, LJ_ctUSB, "1", 1, &ljHandle);
ErrorHandler(ljError, __LINE__); 

ljError = ePut(ljHandle, LJ_ioPIN_CONFIGURATION_RESET, 0, 0, 0);
ErrorHandler(ljError, __LINE__); 

// Read an output from the photocell
ljError = eGet (ljHandle, LJ_ioGET_AIN, 2, &ReadSensorVal, 0);
ErrorHandler(ljError, __LINE__); 

int main (void){
int ReadSensorVal;


ReadSensorVal = 0;
while (ReadSensorVal != 20000){
ljError = eGet (ljHandle, LJ_ioGET_AIN, 2, &ReadSensorVal, 0); //Look at changing to digital 

ErrorHandler(ljError, __LINE__);

MotorSpeed(ReadSensorVal);

}
return 0;
}

void MotorSpeed (float SensorVal )
{
  if ( >= 0 && light < 0.2)
  {
    ljError = ePut (ljHandle, LJ_ioPUT_ANALOG_ENABLE_BIT, 3, 0, 0);   // disable the pin 1,2EN
    ErrorHandler(ljError, __LINE__);
  }

  else if (light >= 0.2 && light < 0.4)
  {
    ljError = ePut (ljHandle, LJ_ioPUT_DIGITAL_BIT, 3, 1, 0);         // enable the pin 1,2EN
  ErrorHandler(ljError, __LINE__);
  
   // Set Timer0 to a 20% duty cycle (is low 49152 out of 65536 
   ljError = ePut(ljHandle, LJ_ioPUT_TIMER_VALUE, 0, 52428 ,0); 
   ErrorHandler(ljError, __LINE__); 
  }
  
  else 
