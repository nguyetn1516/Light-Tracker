#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
#include "LabJackUD.h"
#include "LJUD_DynamicLinking.h"


// ErrorHandler code was written by the LabJack company
void ErrorHandler (LJ_ERROR ljError, long lngLineNumber)
{
  char err[255];
  if (ljError != LJE_NOERROR)
  {
    ErrorToString(ljError, err);
    printf("Error # %ld: %s\n", ljError, err);
    printf("Source line number = %ld\n", lngLineNumber);
    if(ljError > LJE_MIN_GROUP_ERROR)
    { 
      getchar();
      exit(0); // Quit if serious error
    }
  }
}
 

int main (void){
int ReadSensorVal;
LJ_ERROR ljError;         // LabJack error code
LJ_HANDLE ljHandle = 0;   // ID# assigned to the opened LabJack
int ReadSensorVal;

LoadLabJackUD(); // Load the LabJack DLL

ljError=ePut(ljHandle, LJ_ioPUT_ANALOG_ENABLE_BIT,2,1,0);
ErrorHandler(ljError,__LINE__);

// Read an output from the photocell
ljError = eGet (ljHandle, LJ_ioGET_AIN, 2, &ReadSensorVal, 0);
ErrorHandler(ljError, __LINE__);

// Open the first found LabJack U3
ljError = OpenLabJack (LJ_dtU3, LJ_ctUSB, "1", 1, &ljHandle);
ErrorHandler(ljError, __LINE__); 

ljError = ePut(ljHandle, LJ_ioPIN_CONFIGURATION_RESET, 0, 0, 0);
ErrorHandler(ljError, __LINE__); 

ReadSensorVal = 0;
while (ReadSensorVal != 20000){
ljError = eGet (ljHandle, LJ_ioGET_AIN, 2, &ReadSensorVal, 0); //Look at changing to digital 

ErrorHandler(ljError, __LINE__);

MotorSpeed(ReadSensorVal);

}
return 0;
}

void MotorSpeed (float SensorVal )
{
  // Set the timer/counter pin offset to 4. This puts Timer0 on FIO4. 
  ljError = ePut(ljHandle,LJ_ioPUT_CON
  
	// set Timer0 to 8-bit pulse width modulation mode, but not sure if we need it
	ljError = ePut(ljHandle, LJ_ioPUT_TIMER_MODE, 0, LJ_tmPWM8, 0);

  if (SensorVal >= 0 && SensorVal < 0.2)
  {
    ljError = ePut (ljHandle, LJ_ioPUT_DIGITAL_BIT, 3, 0, 0);   // disable the pin 1,2EN
    ErrorHandler(ljError, __LINE__);
  }

  else if (SensorVal >= 0.2 && SensorVal < 0.424)
  {
    ljError = ePut (ljHandle, LJ_ioPUT_DIGITAL_BIT, 3, 1, 0);         // enable the pin 1,2EN
    ErrorHandler(ljError, __LINE__);
  
   // Set Timer0 to a 10% duty cycle (out of 65536)
   ljError = ePut(ljHandle, LJ_ioPUT_TIMER_VALUE, 0, 58982.4 ,0); 
   ErrorHandler(ljError, __LINE__);
  }
  
  else if (SensorVal >= 0.424 && SensorVal < 0.648)
  {
    ljError = ePut (ljHandle, LJ_ioPUT_DIGITAL_BIT, 3, 1, 0);         // enable the pin 1,2EN
    ErrorHandler(ljError, __LINE__);
  
   // Set Timer0 to a 20% duty cycle (out of 65536)
   ljError = ePut(ljHandle, LJ_ioPUT_TIMER_VALUE, 0, 52428.8 ,0); 
   ErrorHandler(ljError, __LINE__);
  }
  
  else if (SensorVal >= 0.648 && SensorVal < 0.872)
  {
    ljError = ePut (ljHandle, LJ_ioPUT_DIGITAL_BIT, 3, 1, 0);         // enable the pin 1,2EN
    ErrorHandler(ljError, __LINE__);
  
   // Set Timer0 to a 30% duty cycle (out of 65536)
   ljError = ePut(ljHandle, LJ_ioPUT_TIMER_VALUE, 0, 45875.2 ,0); 
   ErrorHandler(ljError, __LINE__);
  }
  
  else if (SensorVal >= 0.872 && SensorVal < 1.096)
  {
    ljError = ePut (ljHandle, LJ_ioPUT_DIGITAL_BIT, 3, 1, 0);         // enable the pin 1,2EN
    ErrorHandler(ljError, __LINE__);
  
   // Set Timer0 to a 40% duty cycle (out of 65536)
   ljError = ePut(ljHandle, LJ_ioPUT_TIMER_VALUE, 0, 39321.6 ,0); 
   ErrorHandler(ljError, __LINE__);
  }
  
  else if (SensorVal >= 1.096 && SensorVal < 1.32)
  {
    ljError = ePut (ljHandle, LJ_ioPUT_DIGITAL_BIT, 3, 1, 0);         // enable the pin 1,2EN
    ErrorHandler(ljError, __LINE__);
  
   // Set Timer0 to a 50% duty cycle (out of 65536)
   ljError = ePut(ljHandle, LJ_ioPUT_TIMER_VALUE, 0, 32768 ,0); 
   ErrorHandler(ljError, __LINE__);
  }
  
  else if (SensorVal >= 1.32 && SensorVal < 1.544)
  {
    ljError = ePut (ljHandle, LJ_ioPUT_DIGITAL_BIT, 3, 1, 0);         // enable the pin 1,2EN
    ErrorHandler(ljError, __LINE__);
  
   // Set Timer0 to a 60% duty cycle (out of 65536)
   ljError = ePut(ljHandle, LJ_ioPUT_TIMER_VALUE, 0, 26214.4 ,0); 
   ErrorHandler(ljError, __LINE__);
  }
  
  else if (SensorVal >= 1.544 && SensorVal < 1.768)
  {
    ljError = ePut (ljHandle, LJ_ioPUT_DIGITAL_BIT, 3, 1, 0);         // enable the pin 1,2EN
    ErrorHandler(ljError, __LINE__);
  
   // Set Timer0 to a 70% duty cycle (out of 65536)
   ljError = ePut(ljHandle, LJ_ioPUT_TIMER_VALUE, 0, 19660.8 ,0); 
   ErrorHandler(ljError, __LINE__);
  }
  
  else if (SensorVal >= 1.768 && SensorVal < 1.992)
  {
    ljError = ePut (ljHandle, LJ_ioPUT_DIGITAL_BIT, 3, 1, 0);         // enable the pin 1,2EN
    ErrorHandler(ljError, __LINE__);
  
   // Set Timer0 to a 80% duty cycle (out of 65536)
   ljError = ePut(ljHandle, LJ_ioPUT_TIMER_VALUE, 0, 13107.2 ,0); 
   ErrorHandler(ljError, __LINE__);
  }
  
  else if (SensorVal >= 1.992 && SensorVal < 2.216)
  {
    ljError = ePut (ljHandle, LJ_ioPUT_DIGITAL_BIT, 3, 1, 0);         // enable the pin 1,2EN
    ErrorHandler(ljError, __LINE__);
  
   // Set Timer0 to a 90% duty cycle (out of 65536)
   ljError = ePut(ljHandle, LJ_ioPUT_TIMER_VALUE, 0, 6553.6 ,0); 
   ErrorHandler(ljError, __LINE__);
  }
  
  else if (SensorVal >= 2.216 && SensorVal < 2.6)
  {
    ljError = ePut (ljHandle, LJ_ioPUT_DIGITAL_BIT, 3, 1, 0);         // enable the pin 1,2EN
    ErrorHandler(ljError, __LINE__);
  
   // Set Timer0 to a 100% duty cycle (out of 65536)
   ljError = ePut(ljHandle, LJ_ioPUT_TIMER_VALUE, 0, 65536 ,0); 
   ErrorHandler(ljError, __LINE__);
  }
