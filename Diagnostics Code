/*
    Program created by Team 05:
    Luis Nadora, Nguyet Nguyen, Brent Goodman

    This is the diagnostics code with the user-interface.
    There are three testing options to test each part of
    our project to make sure everything is working properly.
*/

#include <stdio.h>
#include <Windows.h>
#include <conio.h>
#include <stdlib.h>
#include "LabJackUD.h"
#include "LJUD_DynamicLinking.h"

#define BLUE FOREGROUND_BLUE
#define LIGHTBLUE    FOREGROUND_INTENSITY | FOREGROUND_BLUE
#define bgLIGHTBLUE    BACKGROUND_INTENSITY | BACKGROUND_BLUE
#define BLACK 0
#define bgBLACK 0
#define bgWHITE        BACKGROUND_RED | BACKGROUND_GREEN | BACKGROUND_BLUE
#define WHITE        FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE

//Sets the color of the text that is displayed by console output functions
void textcolor (int color)
{
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
}

// Clears the entire console screen
void clrscr (int color)
{
    DWORD n; // Number of characters written
    DWORD size; // number of visible characters
    COORD coord = {0, 0}; // Coordinates of top-left screen position
    HANDLE hStdOut; // Handle for console standard output
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    // Get a handle to the console screen buffer
    if ((hStdOut = GetStdHandle(STD_OUTPUT_HANDLE)) == INVALID_HANDLE_VALUE)
        return;
    // If non-negative arg then use specified color. Otherwise, use current color.
    if (color >= 0)
        SetConsoleTextAttribute(hStdOut, color);
    // Determine the current buffer size and color
    if (!GetConsoleScreenBufferInfo(hStdOut, &csbi))
        return;
    size = csbi.dwSize.X * csbi.dwSize.Y;
    // Overwrite the screen buffer with space characters
    if (!FillConsoleOutputCharacter(hStdOut, TEXT(' '), size, coord, &n))
        return;
    // Fill the screen buffer with color and attributes
    if (!FillConsoleOutputAttribute(hStdOut, csbi.wAttributes, size, coord, &n))
        return;
    // Move the cursor to the home position
    SetConsoleCursorPosition(hStdOut, coord);
}

void gotoxy (int x, int y)
{
    COORD coord; // Cursor coordinates
    HANDLE hStdOut; // Handle for console standard output
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    // Get a handle to the console screen buffer
    if ((hStdOut = GetStdHandle(STD_OUTPUT_HANDLE)) == INVALID_HANDLE_VALUE)
        return;
    // Get buffer size information
    if (!GetConsoleScreenBufferInfo(hStdOut, &csbi))
        return;
    // If needed, clip specified coordinates to actual buffer boundaries
    if (x < 0) x = 0;
    if (x >= csbi.dwSize.X) x = csbi.dwSize.X - 1;
    if (y < 0) y = 0;
    if (y >= csbi.dwSize.Y) y = csbi.dwSize.Y - 1;
    // Move cursor to specified coordinates
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(hStdOut, coord);
}

int mvputs (int row, int col, const char *str)
{
    gotoxy(row, col);
    return _cputs(str);
}

void ErrorHandler (LJ_ERROR ljError, long lngLineNumber);
void MotorDiag();
void SensorDiag();
void SpeedDiag();

LJ_ERROR ljError;         // LabJack error code
LJ_HANDLE ljHandle = 0;   // ID# assigned to the opened LabJack

int main(void){

    LJ_ERROR ljError;         // LabJack error code
    LJ_HANDLE ljHandle = 0;   // ID# assigned to the opened LabJack
    LoadLabJackUD();

    // Open the first found LabJack U3
    ljError = OpenLabJack (LJ_dtU3, LJ_ctUSB, "1", 1, &ljHandle);
    ErrorHandler(ljError, __LINE__);

    ljError = ePut(ljHandle, LJ_ioPIN_CONFIGURATION_RESET, 0, 0, 0);
    ErrorHandler(ljError, __LINE__);

    {// setup
    gotoxy(30, 8);
    _cprintf("Select the diagnostics mode (press 1, 2, or 3):");
    mvputs(40, 9, "or press escape to exit");
    textcolor(LIGHTBLUE | bgWHITE);
    mvputs(45, 15, "1) Test Motor On/Off");
    mvputs(45, 17, "2) Test Photosensor");
    mvputs(45, 19, "3) Test Motor Speed");
    }

    while(1)
    {
        int userINP = _getch();
        if (userINP == 49)
        {
            textcolor(bgLIGHTBLUE | WHITE);
            mvputs(45, 15, "1) Test Motor On/Off");
            textcolor(LIGHTBLUE | bgWHITE);
            mvputs(45, 17, "2) Test Photosensor");
            mvputs(45, 19, "3) Test Motor Rotation");

            clrscr(WHITE);
            MotorDiag(ljHandle);
        }

        if (userINP == 50)
        {
            textcolor(LIGHTBLUE | bgWHITE);
            mvputs(45, 15, "1) Test Motor On/Off");
            textcolor(bgLIGHTBLUE | WHITE);
            mvputs(45, 17, "2) Test Photosensor");
            textcolor(LIGHTBLUE | bgWHITE);
            mvputs(45, 19, "3) Test Motor Rotation");

            clrscr(WHITE);
            SensorDiag(ljHandle);
        }

        if (userINP == 51)
        {
            textcolor(LIGHTBLUE | bgWHITE);
            mvputs(45, 15, "1) Test Motor On/Off");
            mvputs(45, 17, "2) Test Photosensor");
            textcolor(bgLIGHTBLUE | WHITE);
            mvputs(45, 19, "3) Test Motor Rotation");

            clrscr(WHITE);
            SpeedDiag(ljHandle);
        }

        else if (userINP == 27)
        {
            ljError = ePut(ljHandle, LJ_ioPIN_CONFIGURATION_RESET, 0, 0, 0);
            ErrorHandler(ljError, __LINE__);
            return 0;
        }
    }
    gotoxy(45, 25);
    textcolor(BLACK | bgBLACK);
    _cprintf("");

}
